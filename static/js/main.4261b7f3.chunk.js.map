{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","GGG","className","title","Component","App","props","console","log","state","myState","saySomething","this","onClick","setState","nextProps","nextState","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,8HC6CtBC,G,mLAEjB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAKC,MAAO,UAAU,kBAAC,EAAD,CAAKA,MAAO,a,GAJTC,cAW3BC,E,kDACJ,WAAYC,GAAO,IAAD,6BAChBC,QAAQC,IAAI,IACZ,cAAMF,IACDG,MAAQ,CACXC,QAAS,iBACTC,aAAc,cACdR,MAAO,iBANO,E,qDAUT,IAAD,OAEN,OADAI,QAAQC,IAAI,GAEV,yBAAKN,UAAU,OACb,6BAAMU,KAAKH,MAAME,cACjB,4BAAQE,QAAS,kBAAI,EAAKC,SAAS,CAACX,MAAO,cAAcS,KAAKH,MAAMN,U,4CAgBpDY,EAAWC,GAE/B,OADAT,QAAQC,IAAI,GACRI,KAAKH,MAAMN,QAAUa,EAAUb,S,gDAbLY,EAAWE,GAGzC,OADAV,QAAQC,IAAI,GACRO,EAAUZ,QAAUc,EAAUd,MACzB,CACLA,MAAOY,EAAUZ,OAGd,S,GA7BOC,aC5CEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.4261b7f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n/*\n------------1\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      myState: 'My first state',\n      saySomething: 'Hello World'\n    }\n  }\n  // state = {\n  //   myState: 'Hello',\n  //   saySomething: \"hi\"\n  // }\n  render() {\n    return (\n      <div className=\"App\">\n        <p>{this.state.myState}</p>\n        <p>{this.state.saySomething}</p>\n        <button onClick={()=>this.setState({ saySomething: 'How are you?' })}>Click</button>\n      </div>\n    );\n  }\n}\n\nexport default class GGG extends Component {\n  render() {\n    return (\n      <div className=\"GGG\">\n        <App /><App />\n      </div>\n    );\n  }\n}\n*/\n\n\n\n// -----------2\n\nexport default class GGG extends Component {\n  render() {\n    return (\n      <div className=\"GGG\">\n        <App title={'Hello'}/><App title={'Bro'}/>\n      </div>\n    );\n  }\n}\n\n\nclass App extends Component {\n  constructor(props){\n    console.log(1)\n    super(props);\n    this.state = {\n      myState: 'My first state',\n      saySomething: 'Hello World',\n      title: 'original text'\n    }\n  }\n\n  render(){\n    console.log(3)\n    return (\n      <div className='APP'>\n        <div>{this.state.saySomething}</div>\n        <button onClick={()=>this.setState({title: 'change!'})}>{this.state.title}</button>\n      </div>\n    );    \n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) { \n    // props(�]�N�O�I�s�o�Ӥ�����������ǤJ����) or state (�o�Ӥ�����state)���ܮɡA�N�|�]�@�M\n    console.log(2)\n    if (nextProps.title !== prevState.title) {\n      return {\n        title: nextProps.title //�]�w��props��state�����ܮɡA�Hprops���u������,�B�Y��ͬۦP�A�N���ΦA��s\n      };\n    }\n    return null;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {  \n    console.log(4)\n    if (this.state.title !== nextState.title) { \n      return true;\n    } \n    return false;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}